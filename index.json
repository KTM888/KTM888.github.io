[{"categories":null,"contents":"","permalink":"https://miguel-lopez.me/about/","tags":null,"title":"About"},{"categories":null,"contents":"Intro This a tutorial of wireshark (an open-source packet analyzer) that will teach you how to customize the layout and columns of the GUI interface to optimize your productivity while learning how to navegate through it properly and effectively.\nWeb Traffic and the Default Wireshark Column Display Malware distribution frequently occurs through web traffic, and we also see this channel used for data exfiltration and command and control activity. Wireshark’s default column is not ideal when investigating such malware-based infection traffic. However, Wireshark can be customized to provide a better view of the activity\nimg/Pasted image 20201116120912.png\nWireshark’s default columns are:  No. -Frame number from the beginning of the pcap. The first frame is always 1. Time – Seconds broken down to the nanosecond from the first frame of the pcap The first frame is always 0.000000. Source – Source address, commonly an IPv4, IPv6, or Ethernet address. Destination – Destination address, commonly an IPv4, IPv6, or Ethernet address. Protocol – Protocol used in the Ethernet frame, IP packet, or TCP segment (ARP, DNS, TCP, HTTP, etc.). Length – Length of the frame in bytes.  In my day-to-day work, I require the following columns in my Wireshark display:\n Date \u0026amp; time in UTC Source IP and source port Destination IP and destination port HTTP host HTTPS server Info How can we reach this state? First, we hide or remove the columns we do not want.  Hiding Columns We can easily hide columns in case we need them later. Right-click on any of the column headers to bring up the column header menu. Then left-click any of the listed columns to uncheck them. Figure 2 shows the No., Protocol, and Length columns unchecked and hidden.\nimg/Pasted image 20201116121044.png\nRemoving Columns Because I never use the No., Protocol, or Length columns, I completely remove them. To remove columns, right-click on the column headers you want to remove. Then select “Remove this Column…” from the column header menu.\nimg/Pasted image 20201116121106.png\nAt this point, whether hidden or removed, the only visible columns are Time, Source, Destination, and Info.\nAdding Columns To add columns in Wireshark, use the Column Preferences menu. Right-click on any of the column headers, then select “Column Preferences…”\nimg/Pasted image 20201116121141.png\nThe Column Preferences menu lists all columns, viewed or hidden. Near the bottom left side of the Column Preferences menu are two buttons. One has a plus sign to add columns. The other has a minus sign to remove columns. Left-click on the plus sign. An entry titled “New Column” should appear at the bottom of the column list.\nimg/Pasted image 20201116121158.png\nDouble-click on the “New Column” and rename it as “Source Port.” The column type for any new columns always shows “Number.” Double-click on “Number” to bring up a menu, then scroll to “Src port (unresolved)” and select that for the column type.\nPasted image 20201116121212.png\nimg/Pasted image 20201116121220.png\nOur new column is now named “Source Port” with a column type of “Src port (unresolved).” Left-click on that entry and drag it to a position immediately after the source address.\nimg/Pasted image 20201116121244.png\nAfter the source port has been, add another column titled “Destination Port” with the column type “Dest port (unresolved).”\nimg/Pasted image 20201116121304.png\nLike we did with the source port column, drag the destination port to place it immediately after the Destination address. When you finish, your columns should appear as shown in Figure 10.\nimg/Pasted image 20201116121331.png\nAfter adding the source and destination port columns, click the “OK” button to apply the changes. These new columns are automatically aligned to the right, so right-click on each column header to align them to the left, so they match the other columns.\nimg/Pasted image 20201116121401.png\nimg/Pasted image 20201116121408.png\nIn my day-to-day work, I often hide the source address and source port columns until I need them.\nChanging Time to UTC To change the time display format, go the “View” menu, maneuver to “Time Display Format,” and change the value from “Seconds Since Beginning of Capture” to “UTC Date and Time of Day.” Use the same menu path to change the resolution from “Automatic” to “Seconds.” Figure 13 shows the menu paths for these options.\n![[Pasted image 20201116121503.png]]\n![[Pasted image 20201116121512.png]]\nWireshark column display. To quickly find domains used in HTTP traffic, use the Wireshark filter http.request and examine the frame details window. In the frame details window, expand the line titled “Hypertext Transfer Protocol” by left clicking on the arrow that looks like a greater than sign to make it point down. This reveals several additional lines. Scroll down to the line starting with “Host:” to see the HTTP host name. Left click on this line to select it. Right click on the line to bring up a menu. Near the top of this menu, select “Apply as Column.” This should create a new column with the HTTP host name.\n![[Pasted image 20201116121556.png]]\n![[Pasted image 20201116121605.png]]\nBelow the “Handshake Protocol: Client Hello” line, expand the line that starts with “Extension: server_name.” Under that is “Server Name Indication extension” which contains several Server Name value types when expanded. Select the line that starts with “Server Name:” and apply it as a column. Figure 18 shows an example.\n![[Pasted image 20201116121619.png]]\n![[Pasted image 20201116121628.png]]\nWith this customization, we can filter on http.request or ssl.handshake.type == 1 as shown in Figure 20. This gives us a much better idea of web traffic in a pcap than using the default column display in Wireshark.\n![[Pasted image 20201116121642.png]]\nSummary This tutorial covered the following areas: - Web traffic and the default Wireshark column display - Hiding columns - Removing columns - Adding columns - Changing time to UTC - Custom columns\nWireshark customization is helpful for security professionals investigating suspicious network traffic. It can be extremely useful when reviewing web traffic to determine an infection chain. Using the methods in this tutorial, we can configure Wireshark’s column display to better fit our investigative workflow.\n","permalink":"https://miguel-lopez.me/blog/wireshark-tutorial/","tags":["Wireshark","Open-Source","Tutorials","customising"],"title":"Wireshark Turorial - Customising Columns and Layout for productivity"},{"categories":null,"contents":"Learning C# scripting for Unity [[Behavior Components]] [[Variables and Functions]] [[Conventions and Syntax]] [[IF Statements|C#IFStatements]] [[Loops]] [[Scope and Access Modifiers]] [[Awake and Start Functions]]\nBehaviour Components Changing Colors by pressing Keys using UnityEngine; using System.Collections; public class ExampleBehaviourScript : MonoBehaviour { void Update() { if (Input.GetKeyDown(KeyCode.R)) { GetComponent\u0026lt;Renderer\u0026gt; ().material.color = Color.red; } if (Input.GetKeyDown(KeyCode.G)) { GetComponent\u0026lt;Renderer\u0026gt;().material.color = Color.green; } if (Input.GetKeyDown(KeyCode.B)) { GetComponent\u0026lt;Renderer\u0026gt;().material.color = Color.blue; } } }  In example the public class defines a component that can be use globally throughout the code. input.GetKeyDown(KeyCide.R) defines that when a user press the R key an action will be triggered. GetComponenet\u0026lt;Renderer\u0026gt;().material.color = Color.red; is the action that will be triggered when the user presses the R key, c# knows this because its inside the double brackets \u0026ldquo;{}\u0026rdquo; meaning that is part of the statement above.  Variables and Functions using UnityEngine; using System.Collections; public class VariablesAndFunctions : MonoBehaviour { int myInt = 5; void Start () { myInt = MultiplyByTwo(myInt); Debug.Log (myInt); } int MultiplyByTwo (int number) { int result; result = number * 2; return result; } }  In c# we first declare the type of a variable an then we assign the name to it and then the value, e.g int myInt = 5. In c# you will also have to end each statement with a semi-colon \u0026lsquo;;\u0026rsquo;. The void Start () means that when the program runs (object enters the scene) do this. In this case we do some calculation can Debug.Log(myInt) which means it will log \u0026ldquo;print\u0026rdquo; the calculation into the console. A function in c# is similar to a python def function. The differences are that the actions are inside the double brackets \u0026lsquo;{}\u0026rsquo;. In c# you will first have to declare what you are going to store in the function in this case will be an int integer. Then we need to name the function which will be MultiplyByTwo. In c# a function can have parameters just like in python, however you will have to specify the parameter\u0026rsquo;s value first and then name it like so int number, the int is the parameter\u0026rsquo;s value type and the number is the parameter\u0026rsquo;s name. In the example above, the function will create a variable called result which will store an int integer, which will be the parameter which is named number and multiply that by 2. In c# the return command is equal to print function in python in which will print the output of the statement to the console which in this case will be the result of the actual result.  Conventions and Syntax using UnityEngine; using System.Collections; public class BasicSyntax : MonoBehaviour { void Start () { Debug.Log(transform.position.x); if(transform.position.y \u0026lt;= 5f) { Debug.Log (\u0026#34;I\u0026#39;m about to hit the ground!\u0026#34;); } } } If Statements using UnityEngine; using System.Collections; public class IfStatements : MonoBehaviour { float coffeeTemperature = 85.0f; float hotLimitTemperature = 70.0f; float coldLimitTemperature = 40.0f; void Update () { if(Input.GetKeyDown(KeyCode.Space)) TemperatureTest(); coffeeTemperature -= Time.deltaTime * 5f; } void TemperatureTest () { // If the coffee\u0026#39;s temperature is greater than the hottest drinking temperature...  if(coffeeTemperature \u0026gt; hotLimitTemperature) { // ... do this.  print(\u0026#34;Coffee is too hot.\u0026#34;); } // If it isn\u0026#39;t, but the coffee temperature is less than the coldest drinking temperature...  else if(coffeeTemperature \u0026lt; coldLimitTemperature) { // ... do this.  print(\u0026#34;Coffee is too cold.\u0026#34;); } // If it is neither of those then...  else { // ... do this.  print(\u0026#34;Coffee is just right.\u0026#34;); } } }   In c#, you can use if statements similar to python, the only difference is that instead of elif you use else if as the equivalent.\n  Then all of the c# syntax is applied the same.\n  In c# we use the dot operators (full stop) to drill down into elements inside compound item (something that contains many elements), e.g Debug.log().\n  The transform contains position, rotation and scale (x, y, z).\n  The semi-colon \u0026lsquo;;\u0026rsquo; is use to terminate statements, however not all statements will end with a semi-colon, such as classes, if statements or functions because they will be followed by double brackets \u0026lsquo;{}\u0026rsquo;, but any statements inside those brackets will end with a semi-colon.\n  Indentation unlike python does not have a meaning, but is essential practice for readability and stop mistakes, you should indent every time you start or end an statement.\n  Single line comments are done by using the double slash \u0026lsquo;//\u0026rsquo;,\n  Double line comments start with a \u0026lsquo;/*\u0026rsquo; and finish using the opposite \u0026lsquo;*/\u0026rsquo;\n  ![[Pasted image 20210127195748.png]]\nLoops For Loops using UnityEngine; using System.Collections; public class ForLoop : MonoBehaviour { int numEnemies = 3; void Start () { for(int i = 0; i \u0026lt; numEnemies; i++) { Debug.Log(\u0026#34;Creating enemy number: \u0026#34; + i); } } }  In c# the for loop works by controlling a number of iterations. Meaning, it will start by checking conditions in the loop, and continue by executing the instructions that are in within the body \u0026lsquo;{}\u0026rsquo;. In this example the for loop has three arguments. The first part of the loop is called the iteration (count through the iterations of the loop) meaning the introduction of a variable. The second argument is the condition, which will tell the loop to run if that condition is met (True) the i++ means that the variable i will be incremented by one each time the loops runs.  Do While Loops using UnityEngine; using System.Collections; public class DoWhileLoop : MonoBehaviour { void Start() { bool shouldContinue = false; do { print (\u0026#34;Hello World\u0026#34;); }while(shouldContinue == true); } }  The difference between while and DoWhile loops is that in a while loop the condition is checked before the loop body, whereas the DoWhile test the condition at the end of the body, this means that the body of the DoWhile is guaranteed to run at least once. In this example, we have a boolean variable which is set to false. The Syntax of the do while loop starts with a do followed by double braces {} (body), and ends with the keyword while which inside contains the condition. Finally at the end of the condition you should end the while with a semi-colon ;  While Loops using UnityEngine; using System.Collections; public class WhileLoop : MonoBehaviour { int cupsInTheSink = 4; void Start () { while(cupsInTheSink \u0026gt; 0) { Debug.Log (\u0026#34;I\u0026#39;ve washed a cup!\u0026#34;); cupsInTheSink--; } } }  While loops check the condition before running the body of the loop. we start by declaring the keyword while, followed by the condition inside the double parenthesis (). Then we write the actions that we want the loop o perform by using double braces {}. the while loop does not need the semi-colon ; at the end of the loop.  ForEach loop using UnityEngine; using System.Collections; public class ForeachLoop : MonoBehaviour { void Start () { string[] strings = new string[3]; strings[0] = \u0026#34;First string\u0026#34;; strings[1] = \u0026#34;Second string\u0026#34;; strings[2] = \u0026#34;Third string\u0026#34;; foreach(string item in strings) { print (item); } } } re a datatype when declaring a variable, its purpose is to determine where that variable or function can be seen from.\n Common practice will be to declare public variables or function when there is a specif need for it (e.g using it on another script), otherwise it should be private. If you do not define the type of scope before the datatype C# will automatically define that as a private variable or function. By declaring a variable as public means that the variable will be shown and editable on the component in the inspector. ![[Pasted image 20210204181603.png]] You can add a default value to that variable in the script, but if changed in the inspector that will overwrite the default value, the only way we can overwrite the inspector\u0026rsquo;s value is by placing that variable inside a function.  ![[Pasted image 20210204182005.png]]    Another Class using UnityEngine; using System.Collections; public class AnotherClass { public int apples; public int bananas; private int stapler; private int sellotape; public void FruitMachine (int a, int b) { int answer; answer = a + b; Debug.Log(\u0026#34;Fruit total: \u0026#34; + answer); } private void OfficeSort (int a, int b) { int answer; answer = a + b; Debug.Log(\u0026#34;Office Supplies total: \u0026#34; + answer); } }   In this script, because we previously set the variable as public we can access them.\n  The private and public determination is also applied to functions, for example, in this script we have two functions and we can only access the public function from another script.\n ![[Pasted image 20210204182538.png]]    This is a new type of loop similar to the for loop, but its more simplistic.\n  It is design to help you with collections of data (e.g array).\n  In this example, we start by declaring the loop foreach, followed by the variable stored in the collection, in this case will be item, notice we can use the string keyword to inform the compiler what is stored on the variable, however we can also use var which the compiler will automatically define it.\n  then we use the in keyword followed by the collection name string to create the condition, in this case the loop will check the items inside the string collection, and then print it as declared in the body section of the loop.\n  The foreach loop does not require a semi-colon at the end.\n  Scope and Access Modifiers using UnityEngine; using System.Collections; public class ScopeAndAccessModifiers : MonoBehaviour { public int alpha = 5; private int beta = 0; private int gamma = 5; private AnotherClass myOtherClass; void Start () { alpha = 29; myOtherClass = new AnotherClass(); myOtherClass.FruitMachine(alpha, myOtherClass.apples); }  The scope of a variable is the area in code in which the variable can be use in. The access modifier is a keyword that is place before a datatype when declaring a variable, its purpose is to determine where that variable or function can be seen from. Common practice will be to declare public variables or function when there is a specif need for it (e.g using it on another script), otherwise it should be private. If you do not define the type of scope before the datatype C# will automatically define that as a private variable or function. By declaring a variable as public means that the variable will be shown and editable on the component in the inspector. ![[Pasted image 20210204181603.png]] You can add a default value to that variable in the script, but if changed in the inspector that will overwrite the default value, the only way we can overwrite the inspector\u0026rsquo;s value is by placing that variable inside a function.  ![[Pasted image 20210204182005.png]]    Another Class using UnityEngine; using System.Collections; public class AnotherClass { public int apples; public int bananas; private int stapler; private int sellotape; public void FruitMachine (int a, int b) { int answer; answer = a + b; Debug.Log(\u0026#34;Fruit total: \u0026#34; + answer); } private void OfficeSort (int a, int b) { int answer; answer = a + b; Debug.Log(\u0026#34;Office Supplies total: \u0026#34; + answer); } }  In this script, because we previously set the variable as public we can access them. The private and public determination is also applied to functions, for example, in this script we have two functions and we can only access the public function from another script.  ![[Pasted image 20210204182538.png]]    Awake and Start using UnityEngine; using System.Collections; public class AwakeAndStart : MonoBehaviour { void Awake () { Debug.Log(\u0026#34;Awake called.\u0026#34;); } void Start () { Debug.Log(\u0026#34;Start called.\u0026#34;); } }  The awake and start are two functions that are called automatically when a script is loaded. The awake function is called first, even if the script component is not enabled. It is used to set references between scripts and initialization. The start function is called only if the script component is enabled, this means that you can use the start function for anything you want to occur when the script component is enabled. The start can be useful to delay the initialization of the script or awake function. In this example, we can use the awake function to assign the enemy ammo and by using the start we can give the enemy the ability to shoot at a defined time when the script component is enabled. NOTE: the awake and start can only be called one in the lifetime of the script attached to an object.  ","permalink":"https://miguel-lopez.me/projects/creations/learning-cs/","tags":["Unity","C#","Tutorials","Programming","Games"],"title":"Learning C# Scripting for Unity"},{"categories":null,"contents":"Intro Doesn\u0026rsquo;t matter whether it\u0026rsquo;s a CakePHP app for a client, your own personal CMS, or any other web based application. If your passing around passwords or other sensitive info you should really implement SSL. SSL provides 2 main perks to your visitors.\n First it encrypts all communication that flies across the web. This prevents curious or devious billies from getting your secrets. Secondly it ensures to the user that your server is in fact who it claims, and not a nasty \u0026lsquo;man in the middle\u0026quot; attack. Finally it gives your site that touch of class\u0026hellip;. which of course a classy person like yourself relies on.  Once you implement SSL certificates on your server you\u0026rsquo;ll want to require secure connections using Apache\u0026rsquo;s rewrite module. Now I won\u0026rsquo;t dwell on the creation and signing of certificates, its already well documented. If your just starting out though,heres a few links I recommend;\n Creating self-signed certificates (free, but should only be used internally or for testing, users will; see an \u0026lsquo;Untrusted\u0026quot; warning) Requesting a CA Signed certificate (not free, but the final certificate is trusted and seamless for users)  The second link uses the schools internal CA, you will need to pay a public CA like Entrust or Verisign. All of this information is aimed at \u0026lsquo;nix or solaris servers running apache. Why? cause a production windows server is laughable :-p\nNow that you have a certificate, whats next? So there you are you have a shiny new Certificate and Server key, how do you force visitors to your apache driven site to use the SSL? You copied the certificates into the appropite locations right? And you have made the needed changes in httpd.conf right? So now when you view https://example.com you see a \u0026lsquo;trusted\u0026rsquo; warning or your site right? If No to any of these than this article does a pretty good job of outlining those steps.\nThe SSL Works, How do I force connections to use it? First you need to decide if you want to force every page on your site to use SSL, or only a particular sub-domain, or maybe just your admin directory. Since the overhead is minimal there is no harm is forcing the entire domain to leverage SSL, but if it is a self-signed certificate for your personal use than you\u0026rsquo;ll most certainly want to restrict its use to your own areas. This prevents users from seeing that nasty warning \u0026ldquo;This server is not trusted\u0026rdquo; You\u0026rsquo;ll know if your using SSL because the url prefix changes from http to https (s for secure).\nForcing entire domain to use SSL You want any visit, any where to use ssl. This probably the simplest solution. Create or append to your htaccess file in the top directory of your server. Some people use a port check (80 is typically http, while 443 is https) but if you have alernate configs or the user just adds :8080 to the end of the url this method is useless. Instead check whether the https environmental variable is set, if not then redirect.\nRewriteCond %{HTTPS} !=on RewriteRule ^(.*)$ https://%{SERVER_NAME}$1 \\[R,L\\] Forcing sub-domains to use SSL Maybe you only want mysecretarea.example.com to use SSL, that\u0026rsquo;s easy enough. Its the same premise as above, but you move the htaccess file into the directory that corresponds to the subdomain. Also change the second line like below;\nRewriteCond %{HTTPS} !=on RewriteRule ^(.*)$ https://mysecretarea.%{SERVER_NAME}$1 \\[R,L\\] Forcing a directory to use SSL This method cn get a little hairier if your using aliases or redirects on top of this one. You\u0026rsquo;ll need to consider what order the commands are read. The basic principle is like so. You want all visits to example.com/admin to use ssl. Create a htaccess file in the parent directory. Again will check for the https variable, but this time we also check for the sub-directory to be in the path.\nRewriteCond %{HTTPS} !=on RewriteRule ^/admin/(.*)$ https://%{SERVER_NAME}/admin/$1 \\[R,L\\] ","permalink":"https://miguel-lopez.me/blog/force-ssl/","tags":["apache","apache","redirect","rewrite","ssl","web development"],"title":"Forcing Visits to use SSL"},{"categories":null,"contents":"Space invadors (A ship that Fires Bullets) is an open-source game project to help you understand the fundamentals of python programming while you make an interactive game.\nPlanning the Project  It is important to plan out each project before you start beginning programming, this is because you will have a better understanding of how your program will look like and also you will manage your time wisely. To do this, you will have to make a description of your program like so;  In Alien Invasion, the player controls a rocket ship that appears at the bottom center of the screen. The player can move the ship right and left using the arrow keys and shoot bullets using the spacebar. When the game begins, a fleet of aliens fills the sky and moves across and down the screen. The player shoots and destroys the aliens. If the player shoots all the aliens, a new fleet appears that moves faster than the previous fleet. If any alien hits the player’s ship or reaches the bottom of the screen, the player loses a ship. If the player loses three ships, the game ends. Starting the Game Project Creating a PyGame Window and Responding to User Input import sys import pygame class AlienInvasion: \u0026#34;\u0026#34;\u0026#34;Overall class to manage game assets and behaviour.\u0026#34;\u0026#34;\u0026#34; def __init__(self): \u0026#34;\u0026#34;\u0026#34;Initalize the game, and create game resources.\u0026#34;\u0026#34;\u0026#34; pygame.init() self.screen = pygame.display.set_mode((1200, 800)) pygame.display.set_caption(\u0026#34;Alien invasion\u0026#34;) def run_game(self): \u0026#34;\u0026#34;\u0026#34;Start the main loop for the game.\u0026#34;\u0026#34;\u0026#34; while True: # Watch for Keyboard and mouse events. for event in pygame.event.get(): if event.type == pygame.QUIT: sys.exit() # make the most recently draw screen visible. pygame.display.flip() if __name__ == \u0026#39;__main__\u0026#39;: # Make a game instance, and run the the game. ai = AlienInvasion() ai.run_game()  Alien Invasion starts as a class called AlienInvasion. In the __init__() method, the pygame.init() function will initialize the background settings that Pygame will need to work properly. Then we call pygame.display.set_mode() to create a display window, on which we will draw all the game\u0026rsquo;s graphical elements. The arguments (1200, 800) us a tuple that defines the dimensions of the game window. In this case will be 1200 pixels wide by 800 pixels high. We assign this display window to the attribute self.screen, so it will be available in all methods in the class. The object we assigned to self.screen is called a surface. A surface in Pygame is a part of the screen where a game element can be displayed. Each element in the game, like an alien or a hip, is its own surface. The surface returned by display.set_mode() represents the entire game window. When we activate the game\u0026rsquo;s animation loop, this surface will be redrawn on every pass through the loop, so it can be updated with any changes triggered by user input. The game is controlled by the run_game() method. That method contains a while loop that returns continually. the while loop contains an event loop and code that manages screen updates. An event is an action that the user performs while playing the game, such as pressing a key or moving the mouse. To make our program respond to events, we write this event loop to listen for events and perform appropriate tasks depending on the kinds of events that may occur. To access the vents that Pygame detects, we will use the pygame.event.get() functions. This function returns a list of events that have taken place since the last time this function was called. Any keyboard or mouse event will cause this for loop to run. Inside of the loop we write a series of if statements to detect and respond to specifics events. For example; when a player clicks the game windows\u0026rsquo;s close button, a pygame,QUIT event is detected and we call sys.wxit() to exit the game The call to pygame.display.flip() tells Pygame to make the most recently drawn screen visible. In this case, it simply draws an empty screen on each pass through the while loop, erasing the old screen so only the new screen is visible. When we move the game elements around, pygame.display.flip() continually updates the display to show the new positions of the game elements and hides the old ones, creating the illusion of smooth movement. At the end of the file, we created an instance of the game, and then call run_game(). We place run_game() in an if block that only runs if the file is called directly. When you run this alien_invasion.py file, you should see an empty Pygame window.  Setting the background Color  Pygame will create a black screen by default. To change this we will add this line to the end of the __init__() method.  Set the background color. ➊ self.bg_color = (230, 230, 230)  We also want the game to redraw the screen during each pass through the loop, to do that will add this like at the end of the run_game() method.  # Redraw the screen during each pass through the loop. ➋ self.screen.fill(self.bg_color)   Colors in Pygame are specified as RGB colors; a mix of red, green, and blue.\n  Each color value can range from 0 to 255.\n  The color value (255, 0, 0) is red, (0, 255, 0) is green, (0, 0, 255) is blue.\n  You can mix them to create up to 16 million colors.\n  At first we assign the color mix (gray) to self.bg_color inside the __init__() method.\n  We then fill the screen with the background color using the fill() which acts on a surface and takes only one argument; a color\n  Creating a Settings Class  Each time we introduce a new functionality to the game, we will have to create some new settings as well Instead of adding settings throughout the code You can write a module called settings that contains a class called Settings to store all these vales in one place. This will allow you to work with just one settings object any time we need to access an individual setting. For example;  class Settings: \u0026#34;\u0026#34;\u0026#34;A class to store all settings for Alien Invasion.\u0026#34;\u0026#34;\u0026#34; def __init__(self): \u0026#34;\u0026#34;\u0026#34;Initialize the game\u0026#39;s settings.\u0026#34;\u0026#34;\u0026#34; # Screen settings self.screen_width = 1200 self.screen_height = 800 self.bg_color = (230, 230, 230)  To make this settings apply into your game you will have to first import them inside your game file like so from settings import Settings You need to replace the settings you made manually inside your program to the variables you have created in the file settings.py You then need to declare the class inside the class you will want to update your settings in this case will be the AlienInvasion class inside the __init__() method like so;  self.settings = Settings()  In this case you will have to change the screen settings. You can do that by declaring them like this;  # Change the dimensions of the game pygame.display.set_mode((self.settings.scrren_width, sef.settings. screen_height)) # Change Background color self.screen.fill(self.settings.bg_color) ","permalink":"https://miguel-lopez.me/projects/creations/space-invaders/","tags":["python","pyGame","game","REST APIs"],"title":"A ship that Fires Bullets"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml\n[outputs] home = [\u0026#34;HTML\u0026#34;, \u0026#34;JSON\u0026#34;] Searching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category\n... \u0026#34;contents\u0026#34;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026#34;tags\u0026#34;:{{ .Params.tags | jsonify }}{{end}}, \u0026#34;categories\u0026#34; : {{ .Params.categories | jsonify }}, ... Edit fuse.js options to Search static/js/search.js\nkeys: [ \u0026#34;title\u0026#34;, \u0026#34;contents\u0026#34;, \u0026#34;tags\u0026#34;, \u0026#34;categories\u0026#34; ] ","permalink":"https://miguel-lopez.me/search/","tags":null,"title":"Search Results"}]