[{"categories":null,"contents":"","permalink":"https://ktm888.github.io/about/","tags":null,"title":"About"},{"categories":null,"contents":"Space invadors (A ship that Fires Bullets) is an open-source game project to help you understand the fundamentals of python programming while you make an interactive game.\nPlanning the Project  It is important to plan out each project before you start beginning programming, this is because you will have a better understanding of how your program will look like and also you will manage your time wisely. To do this, you will have to make a description of your program like so;  In Alien Invasion, the player controls a rocket ship that appears at the bottom center of the screen. The player can move the ship right and left using the arrow keys and shoot bullets using the spacebar. When the game begins, a fleet of aliens fills the sky and moves across and down the screen. The player shoots and destroys the aliens. If the player shoots all the aliens, a new fleet appears that moves faster than the previous fleet. If any alien hits the player’s ship or reaches the bottom of the screen, the player loses a ship. If the player loses three ships, the game ends. Starting the Game Project Creating a PyGame Window and Responding to User Input import sys import pygame class AlienInvasion: \u0026#34;\u0026#34;\u0026#34;Overall class to manage game assets and behaviour.\u0026#34;\u0026#34;\u0026#34; def __init__(self): \u0026#34;\u0026#34;\u0026#34;Initalize the game, and create game resources.\u0026#34;\u0026#34;\u0026#34; pygame.init() self.screen = pygame.display.set_mode((1200, 800)) pygame.display.set_caption(\u0026#34;Alien invasion\u0026#34;) def run_game(self): \u0026#34;\u0026#34;\u0026#34;Start the main loop for the game.\u0026#34;\u0026#34;\u0026#34; while True: # Watch for Keyboard and mouse events. for event in pygame.event.get(): if event.type == pygame.QUIT: sys.exit() # make the most recently draw screen visible. pygame.display.flip() if __name__ == \u0026#39;__main__\u0026#39;: # Make a game instance, and run the the game. ai = AlienInvasion() ai.run_game()  Alien Invasion starts as a class called AlienInvasion. In the __init__() method, the pygame.init() function will initialize the background settings that Pygame will need to work properly. Then we call pygame.display.set_mode() to create a display window, on which we will draw all the game\u0026rsquo;s graphical elements. The arguments (1200, 800) us a tuple that defines the dimensions of the game window. In this case will be 1200 pixels wide by 800 pixels high. We assign this display window to the attribute self.screen, so it will be available in all methods in the class. The object we assigned to self.screen is called a surface. A surface in Pygame is a part of the screen where a game element can be displayed. Each element in the game, like an alien or a hip, is its own surface. The surface returned by display.set_mode() represents the entire game window. When we activate the game\u0026rsquo;s animation loop, this surface will be redrawn on every pass through the loop, so it can be updated with any changes triggered by user input. The game is controlled by the run_game() method. That method contains a while loop that returns continually. the while loop contains an event loop and code that manages screen updates. An event is an action that the user performs while playing the game, such as pressing a key or moving the mouse. To make our program respond to events, we write this event loop to listen for events and perform appropriate tasks depending on the kinds of events that may occur. To access the vents that Pygame detects, we will use the pygame.event.get() functions. This function returns a list of events that have taken place since the last time this function was called. Any keyboard or mouse event will cause this for loop to run. Inside of the loop we write a series of if statements to detect and respond to specifics events. For example; when a player clicks the game windows\u0026rsquo;s close button, a pygame,QUIT event is detected and we call sys.wxit() to exit the game The call to pygame.display.flip() tells Pygame to make the most recently drawn screen visible. In this case, it simply draws an empty screen on each pass through the while loop, erasing the old screen so only the new screen is visible. When we move the game elements around, pygame.display.flip() continually updates the display to show the new positions of the game elements and hides the old ones, creating the illusion of smooth movement. At the end of the file, we created an instance of the game, and then call run_game(). We place run_game() in an if block that only runs if the file is called directly. When you run this alien_invasion.py file, you should see an empty Pygame window.  Setting the background Color  Pygame will create a black screen by default. To change this we will add this line to the end of the __init__() method.  Set the background color. ➊ self.bg_color = (230, 230, 230)  We also want the game to redraw the screen during each pass through the loop, to do that will add this like at the end of the run_game() method.  # Redraw the screen during each pass through the loop. ➋ self.screen.fill(self.bg_color)   Colors in Pygame are specified as RGB colors; a mix of red, green, and blue.\n  Each color value can range from 0 to 255.\n  The color value (255, 0, 0) is red, (0, 255, 0) is green, (0, 0, 255) is blue.\n  You can mix them to create up to 16 million colors.\n  At first we assign the color mix (gray) to self.bg_color inside the __init__() method.\n  We then fill the screen with the background color using the fill() which acts on a surface and takes only one argument; a color\n  Creating a Settings Class  Each time we introduce a new functionality to the game, we will have to create some new settings as well Instead of adding settings throughout the code You can write a module called settings that contains a class called Settings to store all these vales in one place. This will allow you to work with just one settings object any time we need to access an individual setting. For example;  class Settings: \u0026#34;\u0026#34;\u0026#34;A class to store all settings for Alien Invasion.\u0026#34;\u0026#34;\u0026#34; def __init__(self): \u0026#34;\u0026#34;\u0026#34;Initialize the game\u0026#39;s settings.\u0026#34;\u0026#34;\u0026#34; # Screen settings self.screen_width = 1200 self.screen_height = 800 self.bg_color = (230, 230, 230)  To make this settings apply into your game you will have to first import them inside your game file like so from settings import Settings You need to replace the settings you made manually inside your program to the variables you have created in the file settings.py You then need to declare the class inside the class you will want to update your settings in this case will be the AlienInvasion class inside the __init__() method like so;  self.settings = Settings()  In this case you will have to change the screen settings. You can do that by declaring them like this;  # Change the dimensions of the game pygame.display.set_mode((self.settings.scrren_width, sef.settings. screen_height)) # Change Background color self.screen.fill(self.settings.bg_color) ","permalink":"https://ktm888.github.io/projects/creations/space-invaders/","tags":["python","pyGame","game","REST APIs"],"title":"A ship that Fires Bullets"},{"categories":null,"contents":"Intro Doesn\u0026rsquo;t matter whether it\u0026rsquo;s a CakePHP app for a client, your own personal CMS, or any other web based application. If your passing around passwords or other sensitive info you should really implement SSL. SSL provides 2 main perks to your visitors.\n First it encrypts all communication that flies across the web. This prevents curious or devious billies from getting your secrets. Secondly it ensures to the user that your server is in fact who it claims, and not a nasty \u0026lsquo;man in the middle\u0026quot; attack. Finally it gives your site that touch of class\u0026hellip;. which of course a classy person like yourself relies on.  Once you implement SSL certificates on your server you\u0026rsquo;ll want to require secure connections using Apache\u0026rsquo;s rewrite module. Now I won\u0026rsquo;t dwell on the creation and signing of certificates, its already well documented. If your just starting out though,heres a few links I recommend;\n Creating self-signed certificates (free, but should only be used internally or for testing, users will; see an \u0026lsquo;Untrusted\u0026quot; warning) Requesting a CA Signed certificate (not free, but the final certificate is trusted and seamless for users)  The second link uses the schools internal CA, you will need to pay a public CA like Entrust or Verisign. All of this information is aimed at \u0026lsquo;nix or solaris servers running apache. Why? cause a production windows server is laughable :-p\nNow that you have a certificate, whats next? So there you are you have a shiny new Certificate and Server key, how do you force visitors to your apache driven site to use the SSL? You copied the certificates into the appropite locations right? And you have made the needed changes in httpd.conf right? So now when you view https://example.com you see a \u0026lsquo;trusted\u0026rsquo; warning or your site right? If No to any of these than this article does a pretty good job of outlining those steps.\nThe SSL Works, How do I force connections to use it? First you need to decide if you want to force every page on your site to use SSL, or only a particular sub-domain, or maybe just your admin directory. Since the overhead is minimal there is no harm is forcing the entire domain to leverage SSL, but if it is a self-signed certificate for your personal use than you\u0026rsquo;ll most certainly want to restrict its use to your own areas. This prevents users from seeing that nasty warning \u0026ldquo;This server is not trusted\u0026rdquo; You\u0026rsquo;ll know if your using SSL because the url prefix changes from http to https (s for secure).\nForcing entire domain to use SSL You want any visit, any where to use ssl. This probably the simplest solution. Create or append to your htaccess file in the top directory of your server. Some people use a port check (80 is typically http, while 443 is https) but if you have alernate configs or the user just adds :8080 to the end of the url this method is useless. Instead check whether the https environmental variable is set, if not then redirect.\nRewriteCond %{HTTPS} !=on RewriteRule ^(.*)$ https://%{SERVER_NAME}$1 \\[R,L\\] Forcing sub-domains to use SSL Maybe you only want mysecretarea.example.com to use SSL, that\u0026rsquo;s easy enough. Its the same premise as above, but you move the htaccess file into the directory that corresponds to the subdomain. Also change the second line like below;\nRewriteCond %{HTTPS} !=on RewriteRule ^(.*)$ https://mysecretarea.%{SERVER_NAME}$1 \\[R,L\\] Forcing a directory to use SSL This method cn get a little hairier if your using aliases or redirects on top of this one. You\u0026rsquo;ll need to consider what order the commands are read. The basic principle is like so. You want all visits to example.com/admin to use ssl. Create a htaccess file in the parent directory. Again will check for the https variable, but this time we also check for the sub-directory to be in the path.\nRewriteCond %{HTTPS} !=on RewriteRule ^/admin/(.*)$ https://%{SERVER_NAME}/admin/$1 \\[R,L\\] ","permalink":"https://ktm888.github.io/blog/force-ssl/","tags":["apache","apache","redirect","rewrite","ssl","web development"],"title":"Forcing Visits to use SSL"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml\n[outputs] home = [\u0026#34;HTML\u0026#34;, \u0026#34;JSON\u0026#34;] Searching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category\n... \u0026#34;contents\u0026#34;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026#34;tags\u0026#34;:{{ .Params.tags | jsonify }}{{end}}, \u0026#34;categories\u0026#34; : {{ .Params.categories | jsonify }}, ... Edit fuse.js options to Search static/js/search.js\nkeys: [ \u0026#34;title\u0026#34;, \u0026#34;contents\u0026#34;, \u0026#34;tags\u0026#34;, \u0026#34;categories\u0026#34; ] ","permalink":"https://ktm888.github.io/search/","tags":null,"title":"Search Results"}]