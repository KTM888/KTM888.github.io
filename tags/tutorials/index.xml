<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorials on Miguel Lopez</title>
    <link>https://ktm888.github.io/tags/tutorials/</link>
    <description>Recent content in Tutorials on Miguel Lopez</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 08 Sep 2019 14:09:10 +0000</lastBuildDate><atom:link href="https://ktm888.github.io/tags/tutorials/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Wireshark Turorial - Customising Columns and Layout for productivity</title>
      <link>https://ktm888.github.io/blog/wireshark-tutorial/</link>
      <pubDate>Sun, 08 Sep 2019 14:09:10 +0000</pubDate>
      
      <guid>https://ktm888.github.io/blog/wireshark-tutorial/</guid>
      <description>Intro This a tutorial of wireshark (an open-source packet analyzer) that will teach you how to customize the layout and columns of the GUI interface to optimize your productivity while learning how to navegate through it properly and effectively.
Web Traffic and the Default Wireshark Column Display Malware distribution frequently occurs through web traffic, and we also see this channel used for data exfiltration and command and control activity. Wiresharkâ€™s default column is not ideal when investigating such malware-based infection traffic.</description>
    </item>
    
    <item>
      <title>Learning C# Scripting for Unity</title>
      <link>https://ktm888.github.io/projects/creations/learning-cs/</link>
      <pubDate>Thu, 08 Aug 2019 14:09:10 +0000</pubDate>
      
      <guid>https://ktm888.github.io/projects/creations/learning-cs/</guid>
      <description>Learning C# scripting for Unity [[Behavior Components]] [[Variables and Functions]] [[Conventions and Syntax]] [[IF Statements|C#IFStatements]] [[Loops]] [[Scope and Access Modifiers]] [[Awake and Start Functions]]
Behaviour Components Changing Colors by pressing Keys using UnityEngine; using System.Collections; public class ExampleBehaviourScript : MonoBehaviour { void Update() { if (Input.GetKeyDown(KeyCode.R)) { GetComponent&amp;lt;Renderer&amp;gt; ().material.color = Color.red; } if (Input.GetKeyDown(KeyCode.G)) { GetComponent&amp;lt;Renderer&amp;gt;().material.color = Color.green; } if (Input.GetKeyDown(KeyCode.B)) { GetComponent&amp;lt;Renderer&amp;gt;().material.color = Color.blue; } } }  In example the public class defines a component that can be use globally throughout the code.</description>
    </item>
    
  </channel>
</rss>
